// TO-DOs:
// - hookup 3 buttons to breadboard and test button code 
// - hookup photocell and see what kind of max/min values I get
// - adapt photocell read code such that it truncates appropriately, then MAPS values appropriately
// - fill modetest function
// - put a low-pass filter on the current brightness level, so that it can't
//   jump around in the middle of transitions or flicker in general
// - DELETE ALL CODE THAT BEGINS WITH ////
// - arrange variables nicely, and go through comments once

/*
    Copyright 2017 Michael Stebbins
    Licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License

    Based on code from Marcus Liang's QlockTwo Clone, 
    Copyright 2009, information: http://www.flickr.com/photos/19203306@N00/sets/72157622998814956/ 
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
    except in compliance with the License.  You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software distributed under the 
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
    either express or implied. See the License for the specific language governing permissions 
    and limitations under the License.

    Ran version 14 for some time, with LEDs continuing to fail.  Decided to replace individual, inexpensive
    white LEDs with Adafruit Dotstar individually-addressable Cool White color temp lights.
    version_reboot starts from version 14, with changes to move to Teensy 3.2 (with soldered-on chip for 
    Teensy RealTimeClock), Dotstar lights and 3.3 to 5 volt level shifter. This completely changes the 
    "charlie-plexed" work and LED drivers necessary in the previous version.
 
*  LAST UPDATED: 01-17-2017
*  Copyright 2016 Mike Stebbins
*  Arduino 1.6.11, Teensyduino 1.30, and Windows 10 used to upload

//-------------------------------------------------------------------------------------------------------------
//PIN ASSIGNMENTS
//-------------------------------------------------------------------------------------------------------------
                          
Teensy 3.1 / 3.2
                                  |      |
                          --------|      |--------
        Power Supply (-) [] Gnd              Vin [] Power Supply (+)
                         [] RX1             AGND []
                         [] TX1             3.3V []             
                         [] 02                23 []
                         [] 03                22 []
                         [] 04                21 []
                         [] 05                20 []
                         [] 06                19 [] SCL
                         [] 07                18 [] SDA
                         [] 08                17 []
                         |  09                16 []
                         [] 10                15 []
                         [] 11                14 []
                         [] 12                13 []
                          |    (+)   (-)         |
                          |     [] [] [] [] []   |
                          ------------------------
                                3 volt coin cell for maintaining RTC

 74AHCT125 Voltage Level Shifter
                     --------------
                GND [] 1OE    VCC [] 5V input
   Strip 1 CLOCK In [] 1A     4OE [] 
  Strip 1 CLOCK Out [] 1Y      4A [] 
                GND [] 2OE     4Y [] 
    Strip 1 DATA In [] 2A     3OE [] 
   Strip 1 DATA Out [] 2Y      3A [] 
         Teensy GND [] GND     3Y [] 
                     --------------

 Power Supply - 5V, 2.4A
                        [] +
                        [] -
                                        
//-------------------------------------------------------------------------------------------------------------       

min1                                                  min2                    
   I    T    L    I    S    Y    M    I    K    E    &
   A    D    Q    U    A    R    T    E    R    E    M
   T    W    E    N    T    Y    F    I    V    E    X
   H    A    L    F    B    T    E    N    F    T    O
   P    A    S    T    E    R    U    N    I    N    E
   O    N    E    S    I    X    T    H    R    E    E
   F    O    U    R    F    I    V    E    T    W    O
   E    I    G    H    T    E    L    E    V    E    N
   S    E    V    E    N    T    W    E    L    V    E
   T    E    N    S    E    O    C    L    O    C    K
min4                                                  min3  

LETTER to LED strip NUMBER decoder
111                                                   112
  000  001  002  003  004  005  006  007  008  009  010 
  021  020  019  018  017  016  015  014  013  012  011
  022  023  024  025  026  027  028  029  030  031  032   
  043  042  041  040  039  038  037  036  035  034  033
  044  045  046  047  048  049  050  051  052  053  054   
  065  064  063  062  061  060  059  058  057  056  055
  066  067  068  069  070  071  072  073  074  075  076   
  087  086  085  084  083  082  081  080  079  078  077
  088  089  090  091  092  093  094  095  096  097  098   
  109  108  107  106  105  104  103  102  101  100  099
110                                                   113

*/

//-------------------------------------------------------------------------------------------------------------
//INCLUDES
//-------------------------------------------------------------------------------------------------------------
#include <Adafruit_DotStar.h>
#include <SPI.h>
#include <TimeLib.h>

//-------------------------------------------------------------------------------------------------------------
//CONSTANTS
//-------------------------------------------------------------------------------------------------------------
#define COLUMNS 11
#define NUMLEDS 114

#define DEFAULTTIME 1483228800 // seconds since epoch as of 1/1/17 00:00:00

#define DATAPIN    11
#define CLOCKPIN   10

// CHECK OR UPDATE(but1read == HIGH) && ((millis()
#define BUT3PIN 8   // minute++
#define BUT2PIN 7   // hour++
#define BUT1PIN 9  // change mode++
#define PHOTOCELLPIN 0 // the cell and 10K pulldown are connected to A0

//-------------------------------------------------------------------------------------------------------------
//VARIABLES
//-------------------------------------------------------------------------------------------------------------
Adafruit_DotStar strip = Adafruit_DotStar(
  NUMLEDS, DATAPIN, CLOCKPIN, DOTSTAR_BRG);

// generated the following exponentially-increasingincreasing brightness levels by inputting
// x values (0,1,2...63) into the formula y = 256^(x/63)-1
uint8_t brightLevels[] = {0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,
                              0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x03,
                              0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x07,
                              0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,
                              0x10,0x11,0x13,0x15,0x17,0x19,0x1B,0x1E,
                              0x21,0x24,0x27,0x2B,0x2F,0x34,0x38,0x3E,
                              0x43,0x4A,0x51,0x58,0x60,0x69,0x73,0x7E,
                              0x89,0x96,0xA4,0xB3,0xC4,0xD6,0xE9,0xFF};

int frameDelay = 10;          // (milliseconds), time between transition screens
int nowBrightIndex = 63;      // (0-63), index for lookup table array above
int transUpBrightIndex = 0;
int transDownBrightIndex = 0;
bool transitioningNow = false; // track if we are still going to transition

bool currentScreen[NUMLEDS]; // which pixels are lit up right now
bool nextScreen[NUMLEDS];    // which pixels will be lit up in the next screen
bool stayingOn[NUMLEDS];     // tracks pixels staying at current brightness
bool stayingOff[NUMLEDS];    // tracks pixels staying at zero
bool goingUp[NUMLEDS];       // tracks pixels transitioning to current brightness
bool goingDown[NUMLEDS];     // tracks pixels transitioning to zero

uint8_t currentScreenLevel[NUMLEDS]; // one byte values for each of current screen
uint8_t nextScreenLevel[NUMLEDS];

int cHour;
int cMin;
int cSec;
bool forceUpdate = true;

int photocellReading;

unsigned long but1LastPress = 0;  
unsigned long but2LastPress = 0;  
unsigned long but3LastPress = 0; 

const int buttonPressDelay = 100;

char loveCase = 'a';      //initial case for LOVE switchcase
int dly = 1500;      //length of pause between Mike&Em and heart

// Variables will change for delays in TEST and LOVE modes:
long previousMillis = 0;       // will store last time LED was updated
long pauseDuration = 20;               // interval at which to blink individual letters (milliseconds)
// long longpause = 25;        // interval at which to blink whole words (milliseconds)
int testCase = -1;             // initialize case number 0
byte testBrightness = 0x15;    // set a bit lower than full, as all will be on at once

const int MODEDEFAULT = 0;
const int MODEDEFAULTSEC = 1;
const int MODESECONDS = 2;
const int MODETEST = 3;
const int MODELOVE = 4;

const int ledDelay = 100;       // ms

unsigned long ledLastUpdate = 0;
int currentMode = MODEDEFAULT;

//-------------------------------------------------------------------------------------------------------------------------
//SCREENS SETUP
//-------------------------------------------------------------------------------------------------------------------------
// Following are all of the different screens. Generated with Excel sheet in project folder.
bool screenITIS[NUMLEDS] =
  {1,1,0,1,1,0,0,0,0,0,0,           //  {I,T,_,I,S,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen30[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,0,0,0,0,0,0,0,           //   H,A,L,F,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen25[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,1,1,1,1,1,0,           //   T,W,E,N,T,Y,F,I,V,E,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen20[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,1,0,0,0,0,0,           //   T,W,E,N,T,Y,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen15[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,0,1,1,1,1,1,1,1,0,0,           //   A,_,Q,U,A,R,T,E,R,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen10[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,1,1,1,0,0,0,           //   _,_,_,_,_,T,E,N,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen5[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,0,           //   _,_,_,_,_,_,F,I,V,E,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenPAST[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,0,0,0,0,0,0,0,           //   P,A,S,T,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenTO[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,1,1,           //   _,_,_,_,_,_,_,_,_,T,O,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR1[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,0,0,0,0,0,0,0,0,           //   O,N,E,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR2[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,1,1,1,           //   _,_,_,_,_,_,_,_,T,W,O,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR3[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,H,R,E,E,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR4[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,0,0,0,0,0,0,0,           //   F,O,U,R,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR5[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,1,1,1,1,0,0,0,           //   _,_,_,_,F,I,V,E,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR6[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,1,1,1,0,0,0,0,0,           //   _,_,_,S,I,X,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR7[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   S,E,V,E,N,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR8[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR9[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,1,1,1,1,           //   _,_,_,_,_,_,_,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR10[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,0,0,0,0,0,0,0,0,0,0,0,0};  //   T,E,N,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR11[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,1,1,1,1,1,1,           //   _,_,_,_,_,E,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR12[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,1,1,1,1,1,1,           //   _,_,_,_,_,T,W,E,L,V,E,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenOCLOCK[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,1,1,1,1,1,1,0,0,0,0};  //   _,_,_,_,_,O,C,L,O,C,K_,_,_,_,_}}

bool screenMIN1[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,1,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,.,_,_,_}

bool screenMIN2[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,1,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,.,_,_}

bool screenMIN3[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,1,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,.,_}

bool screenMIN4[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,.}   

bool screenNUMLH0[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   T,_,_,_,T,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   H,_,_,_,B,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   P,_,_,_,E,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   O,_,_,_,I,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   F,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH1[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,1,1,0,0,0,0,0,0,0,0,           //   _,D,Q,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,E,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,L,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,S,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,E,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,U,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,G,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH2[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,B,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   O,_,_,_,_,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   F,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH3[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,B,_,_,_,_,_,_,
   0,1,1,1,1,0,0,0,0,0,0,           //   _,A,S,T,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH4[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   A,_,_,_,A,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   T,_,_,_,T,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   H,_,_,_,B,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH5[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   T,_,_,_,_,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   H,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH6[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   T,_,_,_,_,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   H,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   O,_,_,_,I,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   F,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH7[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,B,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH8[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   T,_,_,_,T,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   H,_,_,_,B,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   O,_,_,_,I,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   F,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH9[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   T,_,_,_,T,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   H,_,_,_,B,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH0[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,F,_,_,_,X,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,E,_,_,_,O,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,U,_,_,_,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,T,_,_,_,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,V,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH1[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,1,1,0,           //   _,_,_,_,_,_,_,_,R,E,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,E,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,T,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,N,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,E,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,W,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,E,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH2[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,X,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,T,_,_,_,_,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,V,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH3[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,X,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,1,1,1,1,           //   _,_,_,_,_,_,_,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH4[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,T,_,_,_,M,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,F,_,_,_,X,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,E,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH5[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,F,_,_,_,_,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,E,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH6[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,F,_,_,_,_,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,E,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,T,_,_,_,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,V,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH7[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,X,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH8[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,F,_,_,_,X,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,E,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,T,_,_,_,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,V,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH9[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,F,_,_,_,X,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,E,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenMIKEEM[NUMLEDS] =
  {0,0,0,0,0,0,1,1,1,1,1,           //  {_,_,_,_,_,_,M,I,K,E,&,
   0,0,0,0,0,0,0,0,0,1,1,           //   _,_,_,_,_,_,_,_,_,E,M,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHEARTFULL[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,1,1,0,0,0,1,1,0,0,           //   _,_,Q,U,_,_,_,E,R,_,_,
   0,1,1,1,1,0,1,1,1,1,0,           //   _,W,E,N,T,_,F,I,V,E,_,
   0,1,1,1,1,1,1,1,1,1,0,           //   _,A,L,F,B,T,E,N,F,T,_,
   0,1,1,1,1,1,1,1,1,1,0,           //   _,A,S,T,E,R,U,N,I,N,_,
   0,1,1,1,1,1,1,1,1,1,0,           //   _,N,E,S,I,X,T,H,R,E,_,
   0,0,1,1,1,1,1,1,1,0,0,           //   _,_,U,R,F,I,V,E,T,_,_,
   0,0,0,1,1,1,1,1,0,0,0,           //   _,_,_,H,T,E,L,E,_,_,_,
   0,0,0,0,1,1,1,0,0,0,0,           //   _,_,_,_,N,T,W,_,_,_,_,
   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,O,_,_,_,_,_,_,_,_,_}

bool screenHEARTLINE[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,1,1,0,0,0,1,1,0,0,           //   _,_,Q,U,_,_,_,E,R,_,_,
   0,1,0,0,1,0,1,0,0,1,0,           //   _,W,_,_,T,_,F,_,_,E,_,
   0,1,0,0,0,1,0,0,0,1,0,           //   _,A,_,_,_,T,_,_,_,T,_,
   0,1,0,0,0,0,0,0,0,1,0,           //   _,A,_,_,_,_,_,_,_,N,_,
   0,1,0,0,0,0,0,0,0,1,0,           //   _,N,_,_,_,_,_,_,_,E,_,
   0,0,1,0,0,0,0,0,1,0,0,           //   _,_,U,_,_,_,_,_,T,_,_,
   0,0,0,1,0,0,0,1,0,0,0,           //   _,_,_,H,_,_,_,E,_,_,_,
   0,0,0,0,1,0,1,0,0,0,0,           //   _,_,_,_,N,_,W,_,_,_,_,
   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,O,_,_,_,_,_,_,_,_,_}

//-------------------------------------------------------------------------------------------------------------
//FUNCTIONS
//-------------------------------------------------------------------------------------------------------------
void zeroOutArray(bool theArray[], int sizeOfArray)  {
  for (int i = 0; i < sizeOfArray; i++)  {
    theArray[i] = 0;
    }
}

void combineArrays(bool arrayA[], bool arrayB[], bool *parrayC, int sizeOfArray)  {
  // create temp arrays to be OR'd together
  bool tempAdditionA[sizeOfArray];
  bool tempAdditionB[sizeOfArray];

  // copy the first and second arrays to OR together into temp arrays
  memcpy(tempAdditionA, arrayA, sizeOfArray);
  memcpy(tempAdditionB, arrayB, sizeOfArray);

  for (int i = 0; i < sizeOfArray; i++)  {
    if ((tempAdditionA[i] == 1) || (tempAdditionB[i] == 1))  {
      parrayC[i] = 1;      
    }
    else  {
      parrayC[i] = 0;
    }
  }
}

void printArray(bool theArray[], int sizeOfArray)  {
  for (int i = 0; i < sizeOfArray; i++)  {
    Serial.print(theArray[i]);
    Serial.print(" ");
  }
  Serial.println();
}

void printArrayByte(uint8_t theArray[], int sizeOfArray)  {
  for (int i = 0; i < sizeOfArray; i++)  {
    PrintHex8(theArray,sizeOfArray);
  }
  Serial.println();
}

// from: https://forum.arduino.cc/index.php?topic=38107.0
void PrintHex8(uint8_t *data, uint8_t length)  { // prints 8-bit data in hex with leading zeroes
  for (int i=0; i<length; i++) { 
    if (data[i]<0x10) {
      Serial.print("0");
    }
    Serial.print(data[i],HEX);
    Serial.print(" "); 
    }
}

void setNextScreenLevels()  {
  // set the transition indices to their starting points for the tranisitions
  transDownBrightIndex = nowBrightIndex;
  transUpBrightIndex = 0;
  
  while (transitioningNow == true)  {
    for (int i = 0; i < NUMLEDS; i++)  {
      if (stayingOn[i] == true)  {
        currentScreenLevel[i] = brightLevels[nowBrightIndex];   
      }
      else if (goingUp[i] == true)  {
        currentScreenLevel[i] = brightLevels[transUpBrightIndex];
        }
      else if (goingDown[i] == true)  {
        currentScreenLevel[i] = brightLevels[transDownBrightIndex];
      }
      else  {
        currentScreenLevel[i] = 0x00;
      }
    }
    
    // update the transition counters unless they've reached the end of transitioning
    if (transUpBrightIndex == nowBrightIndex)  {
      transitioningNow = false;
      }
    else { 
      transUpBrightIndex++; 
      transDownBrightIndex--;
      }

    lightUpLEDs();
    // printArrayByte(currentScreenLevel,NUMLEDS);
    
    // delay for 1 frame duration
    delay(frameDelay);                  
  }
}

void lightUpLEDs()  {
  // takes care of the LED strips being wired in "S"-shaped chain
  bool reversed = false;  // track if we're on a Left-to-Right strip or R-to-L (= reversed)
  int j = 0;              // if on a reversed strip, track which position we're in

  for (int i = 0; i < NUMLEDS; i++)  {
    if (reversed == false)  {
      strip.setPixelColor(i, currentScreenLevel[i]);
    }
    else {
      int temp = i + 10 - (2 * j);
      strip.setPixelColor(i, currentScreenLevel[temp]);
      j++;
    }
    
    if (i%COLUMNS == (COLUMNS-1))  {
      reversed = !reversed;
      j = 0;
    }    
  }
  strip.show();
}

void digitalClockDisplay() {
  // digital clock display of the time
  Serial.print(hour());
  printDigits(minute());
  printDigits(second());
  Serial.print(" ");
  Serial.print(day());
  Serial.print(" ");
  Serial.print(month());
  Serial.print(" ");
  Serial.print(year()); 
  Serial.println(); 
}

void printDigits(int digits) {
  // utility function for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
  if(digits < 10)
    Serial.print('0');
  Serial.print(digits);
}

// adds one minute to the time and resets seconds to zero
void addOneMinute()  {
  digitalClockDisplay();
  int temp = now()%60;  
  adjustTime(60-temp);
  digitalClockDisplay();
}

// adds one hour to the time
void addOneHour()  {
  digitalClockDisplay();
  adjustTime(3600);
  digitalClockDisplay();
}

void readPhotocell()  {
  // Read and serial print brightness of photocell
  photocellReading = analogRead(PHOTOCELLPIN);
  //Serial.print("Analog reading = ");
  //Serial.println(photocellReading); // the raw analog reading
}

void adjustMaxIntensity()  {
}

void checkButtons()  {
  int but1read = digitalRead(BUT1PIN);
  int but2read = digitalRead(BUT2PIN);
  int but3read = digitalRead(BUT3PIN);

  if ((but1read == HIGH) && ((millis() - but1LastPress) > buttonPressDelay)) {
    but1LastPress = millis();
    doButton1();
  }
  else if ((but1read == LOW) && ((millis() - but1LastPress) > buttonPressDelay ))
    but1LastPress = 0;  // reset
  
  if ((but2read == HIGH) && ((millis() - but2LastPress) > buttonPressDelay)) {
    but2LastPress = millis();
    doButton2();
  }
  else if ((but2read == LOW) && ((millis() - but2LastPress) > buttonPressDelay ))
    but2LastPress = 0;  // reset
    
  if ((but3read == HIGH) && ((millis() - but3LastPress) > buttonPressDelay)) {
    but3LastPress = millis();
    doButton3();
  }
  else if ((but3read == LOW) && ((millis() - but3LastPress) > buttonPressDelay ))
   but3LastPress = 0;  // reset  
}

void doButton1()  {  // mode change
  if (currentMode == MODEDEFAULT)  {
    currentMode = MODEDEFAULTSEC;
  }
  else if (currentMode == MODEDEFAULTSEC)  {
    currentMode = MODESECONDS;
  }
  else if (currentMode == MODESECONDS)  {
    currentMode = MODETEST;
  }
  else if (currentMode == MODETEST)  {
    currentMode = MODELOVE;
  }
  else if (currentMode == MODELOVE)  {
    currentMode = MODEDEFAULT;
  }
  forceUpdate = true;   
}

void doButton2()  {  // increment the hour
  addOneHour();
}

void doButton3()  {  // increment the minute, reset seconds to zero
  addOneMinute();
}

void modeDefault()  {
  int curHour = hour();
  int curMin  = minute();
  int curSec  = second();

  if ((curHour == cHour) && (curMin == cMin) && (forceUpdate == false))  {
    return;
  }

  int tpast5mins = curMin % 5; // remainder
  int t5mins = curMin - tpast5mins;
  int tHour = curHour;
   
  if (tHour > 12) {
    tHour = tHour - 12;
  }
  else if (tHour == 0)  {
    tHour = 12;
  }

  // create temp array to hold the OR combined result
  bool tempCompiled[NUMLEDS];

  zeroOutArray(nextScreen,NUMLEDS);
  zeroOutArray(tempCompiled,NUMLEDS);
 
  combineArrays(tempCompiled, screenITIS, &tempCompiled[0], NUMLEDS);
  
   if (t5mins == 5 || t5mins == 55)  {
       combineArrays(tempCompiled, screen5, &tempCompiled[0], NUMLEDS);  // 5 past or 5 to..
     }
   else if (t5mins == 10 || t5mins == 50)  {
       combineArrays(tempCompiled, screen10, &tempCompiled[0], NUMLEDS);  // 10 past or 10 to..
     }  
   else if (t5mins == 15 || t5mins == 45)  {
       combineArrays(tempCompiled, screen15, &tempCompiled[0], NUMLEDS);  // ..etc.
     }
   else if (t5mins == 20 || t5mins == 40)  {
       combineArrays(tempCompiled, screen20, &tempCompiled[0], NUMLEDS);
     }
   else if (t5mins == 25 || t5mins == 35)  {
       combineArrays(tempCompiled, screen25, &tempCompiled[0], NUMLEDS);
     }
   else if (t5mins == 30)  {
       combineArrays(tempCompiled, screen30, &tempCompiled[0], NUMLEDS);
     }

   // past or to or o'clock?
   if (t5mins == 0)  {
       combineArrays(tempCompiled, screenOCLOCK, &tempCompiled[0], NUMLEDS);
     }
   else if (t5mins > 30)  {
       combineArrays(tempCompiled, screenTO, &tempCompiled[0], NUMLEDS);
     }
   else  {
       combineArrays(tempCompiled, screenPAST, &tempCompiled[0], NUMLEDS);
     }
   
   if (t5mins > 30) {
    tHour = tHour+1;
    if (tHour > 12) tHour = 1;
   }

   // light up the hour word
   if (tHour == 1)  {
       combineArrays(tempCompiled, screenHOUR1, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 2)  {
       combineArrays(tempCompiled, screenHOUR2, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 3)  {
       combineArrays(tempCompiled, screenHOUR3, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 4)  {
       combineArrays(tempCompiled, screenHOUR4, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 5)  {
       combineArrays(tempCompiled, screenHOUR5, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 6)  {
       combineArrays(tempCompiled, screenHOUR6, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 7)  {
       combineArrays(tempCompiled, screenHOUR7, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 8)  {
       combineArrays(tempCompiled, screenHOUR8, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 9)  {
       combineArrays(tempCompiled, screenHOUR9, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 10)  {
       combineArrays(tempCompiled, screenHOUR10, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 11)  {
       combineArrays(tempCompiled, screenHOUR11, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 12)  {
       combineArrays(tempCompiled, screenHOUR12, &tempCompiled[0], NUMLEDS);
     }
  
  // light up aux minute LED
  if (tpast5mins == 0 )  { 
  }
  else if (tpast5mins == 1)  {
    combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
  }
  else if (tpast5mins == 2)  {
    combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
  }
  if (tpast5mins == 3)  {
    combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
  }
  if (tpast5mins == 4)  {
    combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);       
  }
  
  // save last updated time
  cHour = curHour;
  cMin = curMin;
  cSec = curSec;
  forceUpdate = false;

  memcpy(nextScreen, tempCompiled, NUMLEDS);

  // Compare nextscreen to currentscreen and build transition matrices
  for (int i = 0; i < NUMLEDS; i++)  {
    if ((currentScreen[i] == 1) && (nextScreen[i] == 1))  {
      stayingOn[i] = true; }
    else  { stayingOn[i] = false; }
    
    if ((currentScreen[i] == 0) && (nextScreen[i] == 1))  {
      goingUp[i] = true;
      transitioningNow = true; }
    else  { goingUp[i] = false; }
    
    if ((currentScreen[i] == 1) && (nextScreen[i] == 0))  {
      goingDown[i] = true;
      transitioningNow = true; }
    else  { goingDown[i] = false; }
  }

  // light 'em up, handle the transitions
  setNextScreenLevels();

  // copy the next screen to current screen for the future
  memcpy(currentScreen, tempCompiled, NUMLEDS);
}

void modeDefaultSecs()  {
  int curHour = hour();
  int curMin  = minute();
  int curSec  = second();

  // minute or hour has changed,..
  if ((curHour != cHour) || (curMin != cMin) || (forceUpdate == true))  {
    return;
  }

  int tpast5mins = curMin % 5; // remainder
  int t5mins = curMin - tpast5mins;
  int tHour = curHour;
   
  if (tHour > 12) {
    tHour = tHour - 12;
  }
  else if (tHour == 0)  {
    tHour = 12;
  }

  // create temp array to hold the OR combined result
  bool tempCompiled[NUMLEDS];

  zeroOutArray(nextScreen,NUMLEDS);
  zeroOutArray(tempCompiled,NUMLEDS);
 
  combineArrays(tempCompiled, screenITIS, &tempCompiled[0], NUMLEDS);
  
   if (t5mins == 5 || t5mins == 55)  {
       combineArrays(tempCompiled, screen5, &tempCompiled[0], NUMLEDS);  // 5 past or 5 to..
     }
   else if (t5mins == 10 || t5mins == 50)  {
       combineArrays(tempCompiled, screen10, &tempCompiled[0], NUMLEDS);  // 10 past or 10 to..
     }  
   else if (t5mins == 15 || t5mins == 45)  {
       combineArrays(tempCompiled, screen15, &tempCompiled[0], NUMLEDS);  // ..etc.
     }
   else if (t5mins == 20 || t5mins == 40)  {
       combineArrays(tempCompiled, screen20, &tempCompiled[0], NUMLEDS);
     }
   else if (t5mins == 25 || t5mins == 35)  {
       combineArrays(tempCompiled, screen25, &tempCompiled[0], NUMLEDS);
     }
   else if (t5mins == 30)  {
       combineArrays(tempCompiled, screen30, &tempCompiled[0], NUMLEDS);
     }

   // past or to or o'clock?
   if (t5mins == 0)  {
       combineArrays(tempCompiled, screenOCLOCK, &tempCompiled[0], NUMLEDS);
     }
   else if (t5mins > 30)  {
       combineArrays(tempCompiled, screenTO, &tempCompiled[0], NUMLEDS);
     }
   else  {
       combineArrays(tempCompiled, screenPAST, &tempCompiled[0], NUMLEDS);
     }
   
   if (t5mins > 30) {
    tHour = tHour+1;
    if (tHour > 12) tHour = 1;
   }

   // light up the hour word
   if (tHour == 1)  {
       combineArrays(tempCompiled, screenHOUR1, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 2)  {
       combineArrays(tempCompiled, screenHOUR2, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 3)  {
       combineArrays(tempCompiled, screenHOUR3, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 4)  {
       combineArrays(tempCompiled, screenHOUR4, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 5)  {
       combineArrays(tempCompiled, screenHOUR5, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 6)  {
       combineArrays(tempCompiled, screenHOUR6, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 7)  {
       combineArrays(tempCompiled, screenHOUR7, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 8)  {
       combineArrays(tempCompiled, screenHOUR8, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 9)  {
       combineArrays(tempCompiled, screenHOUR9, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 10)  {
       combineArrays(tempCompiled, screenHOUR10, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 11)  {
       combineArrays(tempCompiled, screenHOUR11, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 12)  {
       combineArrays(tempCompiled, screenHOUR12, &tempCompiled[0], NUMLEDS);
     }

  if (curSec != cSec) {
    // update the seconds;

    int r = curSec % 10;

    if (r > 5)  {
      r = r - 5;
    }

    // 4 different patterns.
    // 0-4,   5-9,   10-14, 15-19 then repeat.
    // 20-24, 25-29, 30-34, 35-39
    // 40-44, 45-49, 50-54, 55-59
  
    if (((curSec > 0) && (curSec < 5)) || ((curSec > 20) && (curSec < 25)) || ((curSec > 40) && (curSec < 45))) {
      if (r == 1)  {
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 2)  {  
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS); 
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 3)  {  
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 4)  {  
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS); 
      }
    }
  
    else if (((curSec > 5) && (curSec < 10)) || ((curSec > 25) && (curSec < 30)) || ((curSec > 45) && (curSec < 50))) {
      if (r == 1)  { 
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 2)  { 
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);      
      }
      else if (r == 3)  { 
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 4)  { 
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS); 

      }
    }
    
    else if (((curSec > 10) && (curSec < 15)) || ((curSec > 30) && (curSec < 35)) || ((curSec > 50) && (curSec < 55)))  {
      if (r == 1)  { 
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 2)  { 
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 3)  { 
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS); 
      }
      else if (r == 4)  { 
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
      }
    }
        
    else if (((curSec > 15) && (curSec < 20)) || ((curSec > 35) && (curSec < 40)) || ((curSec > 55) && (curSec < 60)))  {
      if (r == 1)  { 
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 2)  { 
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 3)  { 
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
      }
      else if (r == 4)  { 
        combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
        combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS); 
        combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
      }
    }
    else if ((r == 0)  || (r == 5))  {
      // light up no corner dots at al
    }
  }

  // save last updated time
  cHour = curHour;
  cMin = curMin;
  cSec = curSec;
  forceUpdate = false; 

  memcpy(nextScreen, tempCompiled, NUMLEDS);

  // Compare nextscreen to currentscreen and build transition matrices
  for (int i = 0; i < NUMLEDS; i++)  {
    if ((currentScreen[i] == 1) && (nextScreen[i] == 1))  {
      stayingOn[i] = true; }
    else  { stayingOn[i] = false; }
    
    if ((currentScreen[i] == 0) && (nextScreen[i] == 1))  {
      goingUp[i] = true;
      transitioningNow = true; }
    else  { goingUp[i] = false; }
    
    if ((currentScreen[i] == 1) && (nextScreen[i] == 0))  {
      goingDown[i] = true;
      transitioningNow = true; }
    else  { goingDown[i] = false; }
  }

  // light 'em up, handle the transitions
  setNextScreenLevels();

  // copy the next screen to current screen for the future
  memcpy(currentScreen, tempCompiled, NUMLEDS);
}

void modeSeconds()  {
  int curHour = hour();
  int curMin  = minute();
  int curSec  = second();

   // no seconds change, do nothing
   if (curSec == cSec)  {
    return;
  }

   int tsec = curSec;

  // create temp array to hold the OR combined result
  bool tempCompiled[NUMLEDS];

  zeroOutArray(nextScreen,NUMLEDS);
  zeroOutArray(tempCompiled,NUMLEDS);

  // decide if we only want to draw the right number of both numbers.
  // reduce the apparentness of the flicker of the non changing digit.
  if ((tsec - (tsec % 10) != cSec - (cSec % 10)) || (forceUpdate == true))  { 
    if (tsec < 10)  {
      combineArrays(tempCompiled, screenNUMLH0, &tempCompiled[0], NUMLEDS);
    }
    else if (tsec < 20)  {
      combineArrays(tempCompiled, screenNUMLH1, &tempCompiled[0], NUMLEDS);
    }
    else if (tsec < 30)  {
      combineArrays(tempCompiled, screenNUMLH2, &tempCompiled[0], NUMLEDS);
    }
    else if (tsec < 40)  {
      combineArrays(tempCompiled, screenNUMLH3, &tempCompiled[0], NUMLEDS);
    }
    else if (tsec < 50)  {
      combineArrays(tempCompiled, screenNUMLH4, &tempCompiled[0], NUMLEDS);
    }
    else  {
      combineArrays(tempCompiled, screenNUMLH5, &tempCompiled[0], NUMLEDS);
    }
  }
  else {
      // do nothing
    }  
   
   // seconds have changed, draw the seconds.
  tsec = tsec % 10;

  if (tsec == 0)  {
    combineArrays(tempCompiled, screenNUMRH0, &tempCompiled[0], NUMLEDS);
  }
  if (tsec == 1)  {
    combineArrays(tempCompiled, screenNUMRH1, &tempCompiled[0], NUMLEDS);
  }
  if (tsec == 2)  {
    combineArrays(tempCompiled, screenNUMRH2, &tempCompiled[0], NUMLEDS);
  }
  if (tsec == 3)  {
    combineArrays(tempCompiled, screenNUMRH3, &tempCompiled[0], NUMLEDS);
  }
  if (tsec == 4)  {
    combineArrays(tempCompiled, screenNUMRH4, &tempCompiled[0], NUMLEDS);
  }
  if (tsec == 5)  {
    combineArrays(tempCompiled, screenNUMRH5, &tempCompiled[0], NUMLEDS);
  }
  if (tsec == 6)  {
    combineArrays(tempCompiled, screenNUMRH6, &tempCompiled[0], NUMLEDS);
  }
  if (tsec == 7)  {
    combineArrays(tempCompiled, screenNUMRH7, &tempCompiled[0], NUMLEDS);
  }
  if (tsec == 8)  {
    combineArrays(tempCompiled, screenNUMRH8, &tempCompiled[0], NUMLEDS);
  }
  if (tsec == 9)  {
    combineArrays(tempCompiled, screenNUMRH9, &tempCompiled[0], NUMLEDS);
  }

  // save last updated time
  cHour = curHour;
  cMin = curMin;
  cSec = curSec;
  forceUpdate = false;

  memcpy(nextScreen, tempCompiled, NUMLEDS);

  // Compare nextscreen to currentscreen and build transition matrices
  for (int i = 0; i < NUMLEDS; i++)  {
    if ((currentScreen[i] == 1) && (nextScreen[i] == 1))  {
      stayingOn[i] = true; }
    else  { stayingOn[i] = false; }
    
    if ((currentScreen[i] == 0) && (nextScreen[i] == 1))  {
      goingUp[i] = true;
      transitioningNow = true; }
    else  { goingUp[i] = false; }
    
    if ((currentScreen[i] == 1) && (nextScreen[i] == 0))  {
      goingDown[i] = true;
      transitioningNow = true; }
    else  { goingDown[i] = false; }
  }

  // light 'em up, handle the transitions
  setNextScreenLevels();

  // copy the next screen to current screen for the future
  memcpy(currentScreen, tempCompiled, NUMLEDS);
}

void modeTest()  {
  unsigned long currentMillis = millis();

  // a bit complicated, but makes more sense if there are more than 2 cases
  if (testCase < 2)   {
    if(currentMillis - previousMillis > pauseDuration)  {
      // save the last time you switched cases
      previousMillis = currentMillis;  
      // increment the case number by one, unless it has reached 
      // the last case, then go back to zero:
      if (testCase < 1) {
        testCase ++;
      } 
      else  {
        testCase = 0;
      }
    }
  }

  switch (testCase) { 
    case 0:  {
      // RUN THROUGH EACH LED ONE BY ONE, QUICKLY
      for (int i = 0; i < NUMLEDS; i++)  {
        strip.setPixelColor(i,0);
      }
      strip.show();
      
      int currentPixel = 0;      
      for (int j = 0; j < NUMLEDS; j++)  {

        for (int i = 0; i < NUMLEDS; i++)  {

          if (i == currentPixel)  {
            strip.setPixelColor(i,testBrightness);  
          }
          else  {          
            strip.setPixelColor(i,0x00);
          }
        }
        strip.show();
        currentPixel++;
        delay(pauseDuration);
      }
    }
    break;
    case 1:  {
      // RUN THE REVERSE OF ABOVE; ALL LIT WITH ONE DARK PIXEL MOVING QUICKLY
      for (int i = 0; i < NUMLEDS; i++)  {
        strip.setPixelColor(i,testBrightness);
      }
      strip.show();
      
      int currentPixel = 0;      
      for (int j = 0; j < NUMLEDS; j++)  {

        for (int i = 0; i < NUMLEDS; i++)  {

          if (i == currentPixel)  {
            strip.setPixelColor(i,0x00);  
          }
          else  {          
            strip.setPixelColor(i,testBrightness);
          }
        }
        strip.show();
        currentPixel++;
        delay(pauseDuration);
      }
    }
    break;
//    case 2: // AND ON....
//      // RUN THROUGH THE SCREENS QUICKLY
//    break;
  }

}

void modeLove()  {
  
  unsigned long currentMillis = millis();

  if ((currentMillis - previousMillis > dly) || (forceUpdate == true))  {
    // save the last time you switched cases
    previousMillis = currentMillis;

    // create temp array to hold the OR combined result
    bool tempCompiled[NUMLEDS];

    zeroOutArray(nextScreen,NUMLEDS);
    zeroOutArray(tempCompiled,NUMLEDS);  

    switch (loveCase)  { 
    case 'a':
      combineArrays(tempCompiled, screenMIKEEM, &tempCompiled[0], NUMLEDS); 
      break;
    case 'b':
      combineArrays(tempCompiled, screenHEARTLINE, &tempCompiled[0], NUMLEDS);
      break;
    case 'c':
      combineArrays(tempCompiled, screenHEARTFULL, &tempCompiled[0], NUMLEDS);
      break;
    }

    // switch the case from it's previous value
    if (loveCase == 'a')  {
      loveCase = 'b'; 
    }
    else if (loveCase == 'b')  {
      loveCase = 'c';
    } 
    else  {
      loveCase = 'a';
    }    
    
    // ensure forceUpdate is set to false
    forceUpdate = false;  

    memcpy(nextScreen, tempCompiled, NUMLEDS);

    // Compare nextscreen to currentscreen and build transition matrices
    for (int i = 0; i < NUMLEDS; i++)  {
      if ((currentScreen[i] == 1) && (nextScreen[i] == 1))  {
        stayingOn[i] = true; }
      else  { stayingOn[i] = false; }
      
      if ((currentScreen[i] == 0) && (nextScreen[i] == 1))  {
        goingUp[i] = true;
        transitioningNow = true; }
      else  { goingUp[i] = false; }
      
      if ((currentScreen[i] == 1) && (nextScreen[i] == 0))  {
        goingDown[i] = true;
        transitioningNow = true; }
      else  { goingDown[i] = false; }
    }

    // light 'em up, handle the transitions
    setNextScreenLevels();

    // copy the next screen to current screen for the future
    memcpy(currentScreen, tempCompiled, NUMLEDS);
  }
}



//-------------------------------------------------------------------------------------------------------------
//SETUP
//-------------------------------------------------------------------------------------------------------------
void setup() {
  Serial.begin(115200);
  strip.begin(); // Initialize pins for output
  strip.show();  // Turn all LEDs off ASAP

  //CHECK OR UPDATE
  pinMode (BUT1PIN, INPUT);
  pinMode (BUT2PIN, INPUT);
  pinMode (BUT3PIN, INPUT);  

  adjustTime(DEFAULTTIME);

  zeroOutArray(currentScreen,NUMLEDS);
}

//-------------------------------------------------------------------------------------------------------------
//LOOP
//-------------------------------------------------------------------------------------------------------------
void loop() {
  checkButtons();

  readPhotocell();
  
  adjustMaxIntensity();

  /*
  // update LEDs and choose run mode    
  if ((millis() - ledLastUpdate) > ledDelay) {
    ledLastUpdate = millis();
    if (currentMode == MODEDEFAULT)  {
      modeDefault();
    }
    else if (currentMode == MODEDEFAULTSEC)  {
      modeDefaultSecs();
    }
    else if (currentMode == MODESECONDS)  {
      modeSeconds();
    }
    else if (currentMode == MODETEST)  {
      modeTest();
    }
    else if (currentMode == MODELOVE)  {
      modeLove();
    }
  }
  */

  modeDefault();  // remove later, this is just a placeholder        
  delay(10);
}
