// TO-DOs:
// - put a low-pass filter on the current brightness level, so that it can't
//   jump around in the middle of transitions or flicker in general

#include <Adafruit_DotStar.h>
#include <SPI.h>
#include <TimeLib.h>

#define COLUMNS 11
#define NUMLEDS 114

#define DEFAULTTIME 1483228861 // seconds since epoch as of 1/1/17 00:00:00

#define DATAPIN    11
#define CLOCKPIN   10

// CHECK OR UPDATE
#define BUT3 8   // minute++
#define BUT2 7   // hour++
#define BUT1 9  // change mode++
#define PHOTOCELLPIN = 0; // the cell and 10K pulldown are connected to A0

Adafruit_DotStar strip = Adafruit_DotStar(
  NUMLEDS, DATAPIN, CLOCKPIN, DOTSTAR_BRG);

// generated the following exponential increasing brightness levels by inputting
// x values (0,1,2...63) into the formula y = 256^(x/63)-1
uint8_t brightLevels[] = {0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,
                              0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x03,
                              0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x07,
                              0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,
                              0x10,0x11,0x13,0x15,0x17,0x19,0x1B,0x1E,
                              0x21,0x24,0x27,0x2B,0x2F,0x34,0x38,0x3E,
                              0x43,0x4A,0x51,0x58,0x60,0x69,0x73,0x7E,
                              0x89,0x96,0xA4,0xB3,0xC4,0xD6,0xE9,0xFF};

int frameDelay = 10;         // (milliseconds), time between transition screens
int nowBrightIndex = 63;  // (0-63), index for lookup table array above
int transUpBrightIndex = 0;
int transDownBrightIndex = 0;
bool transitioningNow = false; // track if we are still going to transition

bool currentScreen[NUMLEDS]; // which pixels are lit up right now
bool nextScreen[NUMLEDS];    // which pixels will be lit up in the next screen
bool stayingOn[NUMLEDS];     // tracks pixels staying at current brightness
bool stayingOff[NUMLEDS];    // tracks pixels staying at zero
bool goingUp[NUMLEDS];       // tracks pixels transitioning to current brightness
bool goingDown[NUMLEDS];     // tracks pixels transitioning to zero

uint8_t currentScreenLevel[NUMLEDS]; // one byte values for each of current screen
uint8_t nextScreenLevel[NUMLEDS];

int cHour;
int cMin;
int cSec;
bool forceUpdate = true;

//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
// Following are all of the different screens. Generated with Excel sheet in project folder.
bool screenITIS[NUMLEDS] =
  {1,1,0,1,1,0,0,0,0,0,0,           //  {I,T,_,I,S,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen30[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,0,0,0,0,0,0,0,           //   H,A,L,F,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen25[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,1,1,1,1,1,0,           //   T,W,E,N,T,Y,F,I,V,E,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen20[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,1,0,0,0,0,0,           //   T,W,E,N,T,Y,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen15[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,0,1,1,1,1,1,1,1,0,0,           //   A,_,Q,U,A,R,T,E,R,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen10[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,1,1,1,0,0,0,           //   _,_,_,_,_,T,E,N,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screen5[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,0,           //   _,_,_,_,_,_,F,I,V,E,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenPAST[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,0,0,0,0,0,0,0,           //   P,A,S,T,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenTO[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,1,1,           //   _,_,_,_,_,_,_,_,_,T,O,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR1[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,0,0,0,0,0,0,0,0,           //   O,N,E,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR2[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,1,1,1,           //   _,_,_,_,_,_,_,_,T,W,O,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR3[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,H,R,E,E,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR4[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,0,0,0,0,0,0,0,           //   F,O,U,R,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR5[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,1,1,1,1,0,0,0,           //   _,_,_,_,F,I,V,E,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR6[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,1,1,1,0,0,0,0,0,           //   _,_,_,S,I,X,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR7[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   S,E,V,E,N,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR8[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR9[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,1,1,1,1,           //   _,_,_,_,_,_,_,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR10[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   1,1,1,0,0,0,0,0,0,0,0,0,0,0,0};  //   T,E,N,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR11[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,1,1,1,1,1,1,           //   _,_,_,_,_,E,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHOUR12[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,1,1,1,1,1,1,           //   _,_,_,_,_,T,W,E,L,V,E,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenOCLOCK[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,1,1,1,1,1,1,0,0,0,0};  //   _,_,_,_,_,O,C,L,O,C,K_,_,_,_,_}}

bool screenMIN1[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,1,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,.,_,_,_}

bool screenMIN2[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,1,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,.,_,_}

bool screenMIN3[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,1,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,.,_}

bool screenMIN4[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,.}   

bool screenNUMLH0[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   T,_,_,_,T,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   H,_,_,_,B,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   P,_,_,_,E,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   O,_,_,_,I,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   F,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH1[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,1,1,0,0,0,0,0,0,0,0,           //   _,D,Q,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,E,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,L,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,S,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,E,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,U,_,_,_,_,_,_,_,_,
   0,0,1,0,0,0,0,0,0,0,0,           //   _,_,G,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH2[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,B,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   O,_,_,_,_,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   F,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH3[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,B,_,_,_,_,_,_,
   0,1,1,1,1,0,0,0,0,0,0,           //   _,A,S,T,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH4[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   A,_,_,_,A,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   T,_,_,_,T,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   H,_,_,_,B,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH5[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   T,_,_,_,_,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   H,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH6[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   T,_,_,_,_,_,_,_,_,_,_,
   1,0,0,0,0,0,0,0,0,0,0,           //   H,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   O,_,_,_,I,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   F,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH7[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,B,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH8[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   T,_,_,_,T,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   H,_,_,_,B,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   O,_,_,_,I,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   F,_,_,_,F,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   E,I,G,H,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMLH9[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   A,D,Q,U,A,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   T,_,_,_,T,_,_,_,_,_,_,
   1,0,0,0,1,0,0,0,0,0,0,           //   H,_,_,_,B,_,_,_,_,_,_,
   1,1,1,1,1,0,0,0,0,0,0,           //   P,A,S,T,E,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,I,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,F,_,_,_,_,_,_,
   0,0,0,0,1,0,0,0,0,0,0,           //   _,_,_,_,T,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH0[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,F,_,_,_,X,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,E,_,_,_,O,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,U,_,_,_,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,T,_,_,_,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,V,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH1[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,1,1,0,           //   _,_,_,_,_,_,_,_,R,E,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,E,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,T,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,N,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,E,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,W,_,
   0,0,0,0,0,0,0,0,0,1,0,           //   _,_,_,_,_,_,_,_,_,E,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH2[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,X,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,T,_,_,_,_,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,V,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH3[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,X,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,1,1,1,1,           //   _,_,_,_,_,_,_,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH4[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,T,_,_,_,M,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,F,_,_,_,X,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,E,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH5[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,F,_,_,_,_,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,E,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH6[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,F,_,_,_,_,
   0,0,0,0,0,0,1,0,0,0,0,           //   _,_,_,_,_,_,E,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,T,_,_,_,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,V,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH7[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,X,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH8[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,F,_,_,_,X,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,E,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,T,_,_,_,E,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,V,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,L,E,V,E,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenNUMRH9[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,T,E,R,E,M,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,F,_,_,_,X,
   0,0,0,0,0,0,1,0,0,0,1,           //   _,_,_,_,_,_,E,_,_,_,O,
   0,0,0,0,0,0,1,1,1,1,1,           //   _,_,_,_,_,_,U,N,I,N,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,E,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,O,
   0,0,0,0,0,0,0,0,0,0,1,           //   _,_,_,_,_,_,_,_,_,_,N,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenMIKEEM[NUMLEDS] =
  {0,0,0,0,0,0,1,1,1,1,1,           //  {_,_,_,_,_,_,M,I,K,E,&,
   0,0,0,0,0,0,0,0,0,1,1,           //   _,_,_,_,_,_,_,_,_,E,M,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,           //   _,_,_,_,_,_,_,_,_,_,_,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,_,_,_,_,_,_,_,_,_,_}

bool screenHEARTFULL[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,1,1,0,0,0,1,1,0,0,           //   _,_,Q,U,_,_,_,E,R,_,_,
   0,1,1,1,1,0,1,1,1,1,0,           //   _,W,E,N,T,_,F,I,V,E,_,
   0,1,1,1,1,1,1,1,1,1,0,           //   _,A,L,F,B,T,E,N,F,T,_,
   0,1,1,1,1,1,1,1,1,1,0,           //   _,A,S,T,E,R,U,N,I,N,_,
   0,1,1,1,1,1,1,1,1,1,0,           //   _,N,E,S,I,X,T,H,R,E,_,
   0,0,1,1,1,1,1,1,1,0,0,           //   _,_,U,R,F,I,V,E,T,_,_,
   0,0,0,1,1,1,1,1,0,0,0,           //   _,_,_,H,T,E,L,E,_,_,_,
   0,0,0,0,1,1,1,0,0,0,0,           //   _,_,_,_,N,T,W,_,_,_,_,
   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,O,_,_,_,_,_,_,_,_,_}

bool screenHEARTLINE[NUMLEDS] =
  {0,0,0,0,0,0,0,0,0,0,0,           //  {_,_,_,_,_,_,_,_,_,_,_,
   0,0,1,1,0,0,0,1,1,0,0,           //   _,_,Q,U,_,_,_,E,R,_,_,
   0,1,0,0,1,0,1,0,0,1,0,           //   _,W,_,_,T,_,F,_,_,E,_,
   0,1,0,0,0,1,0,0,0,1,0,           //   _,A,_,_,_,T,_,_,_,T,_,
   0,1,0,0,0,0,0,0,0,1,0,           //   _,A,_,_,_,_,_,_,_,N,_,
   0,1,0,0,0,0,0,0,0,1,0,           //   _,N,_,_,_,_,_,_,_,E,_,
   0,0,1,0,0,0,0,0,1,0,0,           //   _,_,U,_,_,_,_,_,T,_,_,
   0,0,0,1,0,0,0,1,0,0,0,           //   _,_,_,H,_,_,_,E,_,_,_,
   0,0,0,0,1,0,1,0,0,0,0,           //   _,_,_,_,N,_,W,_,_,_,_,
   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0};  //   _,_,_,_,_,O,_,_,_,_,_,_,_,_,_}

//--------------------------------------------------------------------------------------
// FUNCTIONS ---------------------------------------------------------------------------
//--------------------------------------------------------------------------------------

void zeroOutArray(bool theArray[], int sizeOfArray)  {
  for (int i = 0; i < sizeOfArray; i++)  {
    theArray[i] = 0;
    }
}

void combineArrays(bool arrayA[], bool arrayB[], bool *parrayC, int sizeOfArray)  {
  // create temp arrays to be OR'd together
  bool tempAdditionA[sizeOfArray];
  bool tempAdditionB[sizeOfArray];

  // copy the first and second arrays to OR together into temp arrays
  memcpy(tempAdditionA, arrayA, sizeOfArray);
  memcpy(tempAdditionB, arrayB, sizeOfArray);

  for (int i = 0; i < sizeOfArray; i++)  {
    if ((tempAdditionA[i] == 1) || (tempAdditionB[i] == 1))  {
      parrayC[i] = 1;      
    }
    else  {
      parrayC[i] = 0;
    }
  }
}

void printArray(bool theArray[], int sizeOfArray)  {
  for (int i = 0; i < sizeOfArray; i++)  {
    Serial.print(theArray[i]);
    Serial.print(" ");
  }
  Serial.println();
}

void printArrayByte(uint8_t theArray[], int sizeOfArray)  {
  for (int i = 0; i < sizeOfArray; i++)  {
    PrintHex8(theArray,sizeOfArray);
  }
  Serial.println();
}

// from: https://forum.arduino.cc/index.php?topic=38107.0
void PrintHex8(uint8_t *data, uint8_t length)  { // prints 8-bit data in hex with leading zeroes
  for (int i=0; i<length; i++) { 
    if (data[i]<0x10) {
      Serial.print("0");
    }
    Serial.print(data[i],HEX);
    Serial.print(" "); 
    }
}

void setNextScreenLevels()  {
  // set the transition indices to their starting points for the tranisitions
  transDownBrightIndex = nowBrightIndex;
  transUpBrightIndex = 0;
  
  while (transitioningNow == true)  {
    for (int i = 0; i < NUMLEDS; i++)  {
      if (stayingOn[i] == true)  {
        currentScreenLevel[i] = brightLevels[nowBrightIndex];   
      }
      else if (goingUp[i] == true)  {
        currentScreenLevel[i] = brightLevels[transUpBrightIndex];
        }
      else if (goingDown[i] == true)  {
        currentScreenLevel[i] = brightLevels[transDownBrightIndex];
      }
      else  {
        currentScreenLevel[i] = 0x00;
      }
    }
    
    // update the transition counters unless they've reached the end of transitioning
    if (transUpBrightIndex == nowBrightIndex)  {
      transitioningNow = false;
      }
    else { 
      transUpBrightIndex++; 
      transDownBrightIndex--;
      }

    lightUpLEDs();
    // printArrayByte(currentScreenLevel,NUMLEDS);
    
    // delay for 1 frame duration
    delay(frameDelay);                  
  }
}

void lightUpLEDs()  {
  // takes care of the LED strips being wired in "S"-shaped chain
  bool reversed = false;  // track if we're on a Left-to-Right strip or R-to-L (= reversed)
  int j = 0;              // if on a reversed strip, track which position we're in

  for (int i = 0; i < NUMLEDS; i++)  {
    if (reversed == false)  {
      strip.setPixelColor(i, currentScreenLevel[i]);
    }
    else {
      int temp = i + 10 - (2 * j);
      strip.setPixelColor(i, currentScreenLevel[temp]);
      j++;
    }
    
    if (i%COLUMNS == (COLUMNS-1))  {
      reversed = !reversed;
      j = 0;
    }    
  }
  strip.show();
}

void digitalClockDisplay() {
  // digital clock display of the time
  Serial.print(hour());
  printDigits(minute());
  printDigits(second());
  Serial.print(" ");
  Serial.print(day());
  Serial.print(" ");
  Serial.print(month());
  Serial.print(" ");
  Serial.print(year()); 
  Serial.println(); 
}

void printDigits(int digits) {
  // utility function for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
  if(digits < 10)
    Serial.print('0');
  Serial.print(digits);
}

// adds one minute to the time and resets seconds to zero
void addOneMinute()  {
  digitalClockDisplay();
  int temp = now()%60;  
  adjustTime(60-temp);
  digitalClockDisplay();
}

// adds one hour to the time
void addOneHour()  {
  digitalClockDisplay();
  adjustTime(3600);
  digitalClockDisplay();
}

//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------

void setup() {
  Serial.begin(115200);
  strip.begin(); // Initialize pins for output
  strip.show();  // Turn all LEDs off ASAP

  //CHECK OR UPDATE
  pinMode (BUT1, INPUT);
  pinMode (BUT2, INPUT);
  pinMode (BUT3, INPUT);  

  adjustTime(DEFAULTTIME);

  zeroOutArray(currentScreen,NUMLEDS);
}


//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------

void loop() {

  int currentHour = hour();
  int currentMin  = minute();
  int currentSec  = second();

  if ((currentHour == cHour) && (currentMin == cMin) && (forceUpdate == false))  {
    return;
  }

  int tpast5mins = currentMin % 5; // remainder
  int t5mins = currentMin - tpast5mins;
  int tHour = currentHour;
   
  if (tHour > 12) {
    tHour = tHour - 12;
  }
  else if (tHour == 0)  {
    tHour = 12;
  }

  // create temp array to hold the OR combined result
  bool tempCompiled[NUMLEDS];

  zeroOutArray(nextScreen,NUMLEDS);
  zeroOutArray(tempCompiled,NUMLEDS);

  // bool inputMatrix[5][NUMLEDS] = {{tempCompiled},{screenITIS},{screen5},{screenTO},{screenHOUR12}};

  // for (int i = 0; i < sizeof(inputMatrix)-1; i++)  {
  //   combineArrays(inputMatrix[0], inputMatrix[i+1], &tempCompiled[0], NUMLEDS);
  // }
  
  combineArrays(tempCompiled, screenITIS, &tempCompiled[0], NUMLEDS);
  
   if (t5mins == 5 || t5mins == 55)  {
       combineArrays(tempCompiled, screen5, &tempCompiled[0], NUMLEDS);  // 5 past or 5 to..
     }
   else if (t5mins == 10 || t5mins == 50)  {
       combineArrays(tempCompiled, screen10, &tempCompiled[0], NUMLEDS);  // 10 past or 10 to..
     }  
   else if (t5mins == 15 || t5mins == 45)  {
       combineArrays(tempCompiled, screen15, &tempCompiled[0], NUMLEDS);  // ..etc.
     }
   else if (t5mins == 20 || t5mins == 40)  {
       combineArrays(tempCompiled, screen20, &tempCompiled[0], NUMLEDS);
     }
   else if (t5mins == 25 || t5mins == 35)  {
       combineArrays(tempCompiled, screen25, &tempCompiled[0], NUMLEDS);
     }
   else if (t5mins == 30)  {
       combineArrays(tempCompiled, screen30, &tempCompiled[0], NUMLEDS);
     }

   // past or to or o'clock?
   if (t5mins == 0)  {
       combineArrays(tempCompiled, screenOCLOCK, &tempCompiled[0], NUMLEDS);
     }
   else if (t5mins > 30)  {
       combineArrays(tempCompiled, screenTO, &tempCompiled[0], NUMLEDS);
     }
   else  {
       combineArrays(tempCompiled, screenPAST, &tempCompiled[0], NUMLEDS);
     }
   
   if (t5mins > 30) {
    tHour = tHour+1;
    if (tHour > 12) tHour = 1;
   }

   // light up the hour word
   if (tHour == 1)  {
       combineArrays(tempCompiled, screenHOUR1, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 2)  {
       combineArrays(tempCompiled, screenHOUR2, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 3)  {
       combineArrays(tempCompiled, screenHOUR3, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 4)  {
       combineArrays(tempCompiled, screenHOUR4, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 5)  {
       combineArrays(tempCompiled, screenHOUR5, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 6)  {
       combineArrays(tempCompiled, screenHOUR6, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 7)  {
       combineArrays(tempCompiled, screenHOUR7, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 8)  {
       combineArrays(tempCompiled, screenHOUR8, &tempCompiled[0], NUMLEDS);
     }
   else if (tHour == 9)  {
       combineArrays(tempCompiled, screenHOUR9, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 10)  {
       combineArrays(tempCompiled, screenHOUR10, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 11)  {
       combineArrays(tempCompiled, screenHOUR11, &tempCompiled[0], NUMLEDS);
     } 
   else if (tHour == 12)  {
       combineArrays(tempCompiled, screenHOUR12, &tempCompiled[0], NUMLEDS);
     }
  
  // light up aux minute LED
  if (tpast5mins == 0 )  { 
  }
  else if (tpast5mins == 1)  {
    combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
  }
  else if (tpast5mins == 2)  {
    combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
  }
  if (tpast5mins == 3)  {
    combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
  }
  if (tpast5mins == 4)  {
    combineArrays(tempCompiled, screenMIN1, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN2, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN3, &tempCompiled[0], NUMLEDS);
    combineArrays(tempCompiled, screenMIN4, &tempCompiled[0], NUMLEDS);       
  }
  
  // save last updated time
  cHour = currentHour;
  cMin = currentMin;
  cSec = currentSec;
  forceUpdate = false;

  memcpy(nextScreen, tempCompiled, NUMLEDS);

  // keep copying from HERE
  //-------------------------------------------------------------------
  //-------------------------------------------------------------------
  //------------------------------------------------------------------- 
  //-------------------------------------------------------------------
   
  // Compare nextscreen to currentscreen and build transition matrices
  for (int i = 0; i < NUMLEDS; i++)  {
    if ((currentScreen[i] == 1) && (nextScreen[i] == 1))  {
      stayingOn[i] = true; }
    else  { stayingOn[i] = false; }
    
    if ((currentScreen[i] == 0) && (nextScreen[i] == 1))  {
      goingUp[i] = true;
      transitioningNow = true; }
    else  { goingUp[i] = false; }
    
    if ((currentScreen[i] == 1) && (nextScreen[i] == 0))  {
      goingDown[i] = true;
      transitioningNow = true; }
    else  { goingDown[i] = false; }
  }

  // light 'em up, handle the transitions
  setNextScreenLevels();

  // copy the next screen to current screen for the future
  memcpy(currentScreen, tempCompiled, NUMLEDS);
  
/*
  Serial.println("currentScreen is now  IT IS FIVE TO TWELVE");
  printArray(currentScreen,NUMLEDS);

// TEST: build up IT IS ONE OCLOCK as next screen
  zeroOutArray(tempCompiled,NUMLEDS);
  combineArrays(tempCompiled, screenITIS, &tempCompiled[0], NUMLEDS);
  combineArrays(tempCompiled, screenHOUR1, &tempCompiled[0], NUMLEDS);
  combineArrays(tempCompiled, screenOCLOCK, &tempCompiled[0], NUMLEDS);
  memcpy(nextScreen, tempCompiled, NUMLEDS);

  printArray(nextScreen,NUMLEDS);

  // Compare nextscreen to currentscreen and build transition matrices
  for (int i = 0; i < NUMLEDS; i++)  {
    if ((currentScreen[i] == 1) && (nextScreen[i] == 1))  {
      stayingOn[i] = true; }
    else  { stayingOn[i] = false; }
    
    if ((currentScreen[i] == 0) && (nextScreen[i] == 1))  {
      goingUp[i] = true;
      transitioningNow = true; }
    else  { goingUp[i] = false; }
    
    if ((currentScreen[i] == 1) && (nextScreen[i] == 0))  {
      goingDown[i] = true;
      transitioningNow = true; }
    else  { goingDown[i] = false; }
  }

  Serial.println("currentScreenLevel:"); 

  setNextScreenLevels();

  Serial.println("--------------------------------");
*/          
  delay(50);
}
